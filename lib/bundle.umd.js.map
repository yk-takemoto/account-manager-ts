{"version":3,"file":"bundle.umd.js","sources":["../src/domain/models/organization.ts","../src/domain/models/user.ts","../src/domain/models/account_info.ts","../src/application/auth.dto.ts","../src/infrastructure/repositories/organization.repository.impl.ts","../src/infrastructure/repositories/user.repository.impl.ts","../src/infrastructure/config/env.config.ts","../src/infrastructure/container.ts","../src/application/auth.usecase.ts","../src/interfaces/auth.controller.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const organizationSchema = z.object({\n  orgId: z.string().min(1),\n  orgName: z.string().min(1),\n  llmList: z.array(z.record(z.string())),\n  translateList: z.array(z.record(z.string())),\n});\n\nexport type Organization = z.infer<typeof organizationSchema>;\n\nexport class OrganizationMapper implements Organization {\n  private constructor(\n    public readonly orgId: string,\n    public readonly orgName: string,\n    public readonly llmList: Record<string, string>[],\n    public readonly translateList: Record<string, string>[],\n  ) {\n    organizationSchema.parse(this);\n  }\n\n  static from(args: Organization): Organization {\n    return new OrganizationMapper(args.orgId, args.orgName, args.llmList, args.translateList);\n  }\n\n  update(args: { orgName?: string; llmList?: Record<string, string>[]; translateList?: Record<string, string>[] }): Organization {\n    return OrganizationMapper.from({\n      orgId: this.orgId,\n      orgName: args.orgName ?? this.orgName,\n      llmList: args.llmList ?? this.llmList,\n      translateList: args.translateList ?? this.translateList,\n    });\n  }\n}\n","import { z } from \"zod\";\nimport { Organization, organizationSchema } from \"@/domain/models/organization\";\n\nconst userSchema = z.object({\n  userId: z.string().min(1),\n  userName: z.string().min(1),\n  organization: organizationSchema,\n});\n\nexport type User = z.infer<typeof userSchema>;\n\nexport class UserMapper implements User {\n  constructor(\n    public readonly userId: string,\n    public readonly userName: string,\n    public readonly organization: Organization,\n  ) {\n    userSchema.parse(this);\n  }\n\n  static from(args: User): User {\n    return new UserMapper(args.userId, args.userName, args.organization);\n  }\n\n  update(args: { userName?: string; organization?: Organization }): User {\n    return UserMapper.from({\n      userId: this.userId,\n      userName: args.userName ?? this.userName,\n      organization: args.organization ?? this.organization,\n    });\n  }\n}\n","import { z } from \"zod\";\n\nexport const AccountInfoSchema = z.object({\n  userId: z.string(),\n  userName: z.string(),\n  orgId: z.string(),\n  orgName: z.string(),\n  llmList: z.array(z.record(z.string())),\n  translateList: z.array(z.record(z.string())),\n});\n\nexport type AccountInfo = z.infer<typeof AccountInfoSchema>;\n\nexport class AccountInfoMapper implements AccountInfo {\n  private constructor(\n    public readonly userId: string,\n    public readonly userName: string,\n    public readonly orgId: string,\n    public readonly orgName: string,\n    public readonly llmList: Record<string, string>[],\n    public readonly translateList: Record<string, string>[],\n  ) {\n    AccountInfoSchema.parse(this);\n  }\n\n  static from(args: AccountInfo): AccountInfo {\n    return new AccountInfoMapper(args.userId, args.userName, args.orgId, args.orgName, args.llmList, args.translateList);\n  }\n}\n","import { User, UserMapper } from \"@/domain/models/user\";\nimport { OrganizationMapper } from \"@/domain/models/organization\";\nimport { AccountInfoMapper, AccountInfo } from \"@/domain/models/account_info\";\n\nexport class AccountInfoDto {\n  static toDomain(accountInfo: AccountInfo): User {\n    const organization = OrganizationMapper.from({\n      orgId: accountInfo.orgId,\n      orgName: accountInfo.orgName,\n      llmList: accountInfo.llmList,\n      translateList: accountInfo.translateList,\n    });\n\n    return UserMapper.from({\n      userId: accountInfo.userId,\n      userName: accountInfo.userName,\n      organization,\n    });\n  }\n\n  static fromDomain(user: User): AccountInfo {\n    return AccountInfoMapper.from({\n      userId: user.userId,\n      userName: user.userName,\n      orgId: user.organization.orgId,\n      orgName: user.organization.orgName,\n      llmList: user.organization.llmList,\n      translateList: user.organization.translateList,\n    });\n  }\n}\n","// import { Injectable } from \"@nestjs/common\";\nimport { Organization, OrganizationMapper } from \"@/domain/models/organization\";\nimport { OrganizationRepository } from \"@/domain/repositories/organization.repository\";\nimport { OrganizationYaml } from \"@/infrastructure/config/env.config\";\n\n// @Injectable()\nexport class OrganizationLocalRepository implements OrganizationRepository {\n  private static instance: OrganizationLocalRepository;\n  private readonly organizations: Map<string, Organization>;\n\n  private constructor(orgData: OrganizationYaml) {\n    this.organizations = new Map();\n    this.loadData(orgData);\n  }\n\n  static getInstance(orgData?: OrganizationYaml): OrganizationRepository {\n    if (!OrganizationLocalRepository.instance) {\n      if (!orgData) {\n        throw new Error(\"Organization data is required for local database\");\n      }\n      OrganizationLocalRepository.instance = new OrganizationLocalRepository(orgData);\n    }\n    return OrganizationLocalRepository.instance;\n  }\n\n  private loadData(organizationYaml: OrganizationYaml) {\n    Object.entries(organizationYaml).forEach(([orgId, org]) => {\n      const organization = OrganizationMapper.from({\n        orgId,\n        orgName: org.display_name,\n        llmList: org.llm_apis.map((api: any) => ({ ...api })),\n        translateList: org.translate_apis.map((api: any) => ({ ...api })),\n      });\n      this.organizations.set(orgId, organization);\n    });\n  }\n\n  async findById(orgId: string): Promise<Organization | null> {\n    return this.organizations.get(orgId) || null;\n  }\n\n  async save(org: Organization): Promise<void> {\n    this.organizations.set(org.orgId, org);\n  }\n}\n","// import { Injectable } from \"@nestjs/common\";\nimport { User, UserMapper } from \"@/domain/models/user\";\nimport { UserRepository } from \"@/domain/repositories/user.repository\";\nimport { OrganizationRepository } from \"@/domain/repositories/organization.repository\";\nimport { UserYaml } from \"@/infrastructure/config/env.config\";\n\n// @Injectable()\nexport class UserLocalRepository implements UserRepository {\n  private static instance: UserLocalRepository;\n  private readonly users: Map<string, User>;\n\n  private constructor(\n    private readonly organizationRepository: OrganizationRepository,\n    userData: UserYaml,\n    // private readonly accountEnv: AccountEnv = \"local\",\n  ) {\n    this.users = new Map();\n    this.loadData(userData);\n  }\n\n  static getInstance(organizationRepository: OrganizationRepository, userData?: UserYaml): UserRepository {\n    if (!UserLocalRepository.instance) {\n      if (!userData) {\n        throw new Error(\"User data is required for local database\");\n      }\n      UserLocalRepository.instance = new UserLocalRepository(organizationRepository, userData);\n    }\n    return UserLocalRepository.instance;\n  }\n\n  private async loadData(userYaml: UserYaml) {\n    for (const [userId, user] of Object.entries(userYaml)) {\n      const organization = await this.organizationRepository.findById(user.organization);\n      if (organization) {\n        const userEntity = UserMapper.from({\n          userId,\n          userName: user.display_name,\n          organization,\n        });\n        this.users.set(userId, userEntity);\n      }\n    }\n  }\n\n  async findById(userId: string): Promise<User | null> {\n    return this.users.get(userId) || null;\n  }\n\n  async save(user: User): Promise<void> {\n    this.users.set(user.userId, user);\n  }\n}\n","import { z } from \"zod\";\n\nexport const accountEnvSchema = z.enum([\"local\", \"production\"]);\nexport type AccountEnv = z.infer<typeof accountEnvSchema>;\n\nexport const databaseTypeSchema = z.enum([\"local\", \"dynamodb\"]);\nexport type DatabaseType = z.infer<typeof databaseTypeSchema>;\n\nexport const organizationYamlSchema = z.record(\n  z.object({\n    display_name: z.string().min(1),\n    llm_apis: z.array(z.record(z.string())),\n    translate_apis: z.array(z.record(z.string())),\n  }),\n);\n\nexport type OrganizationYaml = z.infer<typeof organizationYamlSchema>;\n\nexport const userYamlSchema = z.record(\n  z.object({\n    display_name: z.string().min(1),\n    organization: z.string().min(1),\n  }),\n);\n\nexport type UserYaml = z.infer<typeof userYamlSchema>;\n\nexport const authEnvParamSchema = z.object({\n  accountEnv: accountEnvSchema.optional(),\n  databaseType: databaseTypeSchema.optional(),\n  databaseData: z\n    .object({\n      organization: organizationYamlSchema.optional(),\n      user: userYamlSchema.optional(),\n    })\n    .optional(),\n});\n\nexport type AuthEnvParam = z.infer<typeof authEnvParamSchema>;\n\nexport const createAuthEnvParam = () =>\n  authEnvParamSchema.parse({\n    accountEnv: process.env.AUTHSERVER_ACCOUNT_ENV,\n    databaseType: process.env.AUTHSERVER_DATABASE_TYPE,\n    databaseData:\n      process.env.ORGANIZATION_YAML && process.env.USER_YAML\n        ? {\n            organization: organizationYamlSchema.parse(JSON.parse(process.env.ORGANIZATION_YAML)),\n            user: userYamlSchema.parse(JSON.parse(process.env.USER_YAML)),\n          }\n        : undefined,\n  });\n","import { OrganizationRepository } from \"@/domain/repositories/organization.repository\";\nimport { UserRepository } from \"@/domain/repositories/user.repository\";\nimport { OrganizationLocalRepository } from \"@/infrastructure/repositories/organization.repository.impl\";\nimport { UserLocalRepository } from \"@/infrastructure/repositories/user.repository.impl\";\nimport { AccountEnv, AuthEnvParam, createAuthEnvParam } from \"@/infrastructure/config/env.config\";\n\nexport class Container {\n  private static instance: Container;\n  public readonly accountEnv: AccountEnv;\n  public readonly organizationRepository: OrganizationRepository;\n  public readonly userRepository: UserRepository;\n\n  private constructor({ accountEnv = \"local\", databaseType = \"local\", databaseData }: AuthEnvParam = createAuthEnvParam()) {\n    // debug\n    console.log(\"Container.constructor authEnvParam: \", JSON.stringify(databaseData));\n    this.accountEnv = accountEnv;\n    switch (databaseType) {\n      case \"local\":\n        if (!databaseData?.organization || !databaseData?.user) {\n          throw new Error(\"Database data is required for local database\");\n        }\n        this.organizationRepository = OrganizationLocalRepository.getInstance(databaseData.organization);\n        this.userRepository = UserLocalRepository.getInstance(OrganizationLocalRepository.getInstance(), databaseData.user);\n        break;\n      default:\n        throw new Error(`Unsupported database type: ${databaseType}`);\n    }\n  }\n\n  static getInstance(param?: AuthEnvParam): Container {\n    if (!Container.instance) {\n      Container.instance = new Container(param);\n    }\n    return Container.instance;\n  }\n}\n","import { jwtDecode } from \"jwt-decode\";\nimport { AccountInfo } from \"@/domain/models/account_info\";\nimport { AccountInfoDto } from \"@/application/auth.dto\";\nimport { Container } from \"@/infrastructure/container\";\n\nexport class AuthUsecase {\n  constructor(\n    public readonly accountEnv = Container.getInstance().accountEnv,\n    private readonly userRepository = Container.getInstance().userRepository,\n  ) {}\n\n  async authByCredentials(userId: string, __: string): Promise<string | null> {\n    const user = await this.userRepository.findById(userId);\n    // Currently, there is no password verification\n    if (!user) {\n      return null;\n    }\n    return userId;\n  }\n\n  private tokenUser(accessToken: string): string | null {\n    const decoded = jwtDecode(accessToken);\n    return decoded?.sub || null;\n  }\n\n  async getAccountInfo(userId: string, accessToken?: string): Promise<AccountInfo> {\n    const authedUserId = accessToken ? this.tokenUser(accessToken) : userId;\n    if (!authedUserId) {\n      throw new Error(\"Invalid access token\");\n    }\n    const user = await this.userRepository.findById(authedUserId);\n    if (!user) {\n      throw new Error(\"The user or organization information of the authorized user does not exist in the database\");\n    }\n    return AccountInfoDto.fromDomain(user);\n  }\n}\n","import { z } from \"zod\";\nimport { AuthUsecase } from \"@/application/auth.usecase\";\n\nconst AuthByCredentialsInputSchema = z.object({\n  userId: z.string(),\n  password: z.string(),\n});\n\nconst GetAccountInfoInputSchema = z.object({\n  userId: z.string(),\n  accessToken: z.string().optional(),\n});\n\nexport type AuthByCredentialsInput = z.infer<typeof AuthByCredentialsInputSchema>;\nexport type GetAccountInfoInput = z.infer<typeof GetAccountInfoInputSchema>;\n\nexport class AuthFunctionServer {\n  constructor(private readonly usecase: AuthUsecase = new AuthUsecase()) {}\n\n  get accountEnv() {\n    return this.usecase.accountEnv;\n  }\n\n  async authByCredentials(input: AuthByCredentialsInput): Promise<string | null> {\n    const validated = AuthByCredentialsInputSchema.parse(input);\n    return await this.usecase.authByCredentials(validated.userId, validated.password);\n  }\n\n  async getAccountInfo(input: GetAccountInfoInput) {\n    const validated = GetAccountInfoInputSchema.parse(input);\n    return await this.usecase.getAccountInfo(validated.userId, validated.accessToken);\n  }\n}\n"],"names":["organizationSchema","z","object","orgId","string","min","orgName","llmList","array","record","translateList","OrganizationMapper","constructor","this","parse","from","args","update","userSchema","userId","userName","organization","UserMapper","AccountInfoSchema","AccountInfoMapper","AccountInfoDto","toDomain","accountInfo","fromDomain","user","OrganizationLocalRepository","orgData","organizations","Map","loadData","getInstance","instance","Error","organizationYaml","Object","entries","forEach","org","display_name","llm_apis","map","api","translate_apis","set","findById","get","save","UserLocalRepository","organizationRepository","userData","users","userYaml","userEntity","accountEnvSchema","enum","databaseTypeSchema","organizationYamlSchema","userYamlSchema","authEnvParamSchema","accountEnv","optional","databaseType","databaseData","Container","process","env","AUTHSERVER_ACCOUNT_ENV","AUTHSERVER_DATABASE_TYPE","ORGANIZATION_YAML","USER_YAML","JSON","undefined","createAuthEnvParam","console","log","stringify","userRepository","param","AuthUsecase","authByCredentials","__","tokenUser","accessToken","decoded","jwtDecode","sub","getAccountInfo","authedUserId","AuthByCredentialsInputSchema","password","GetAccountInfoInputSchema","usecase","input","validated"],"mappings":"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"}