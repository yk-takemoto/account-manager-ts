"use strict";var t=require("zod"),s=require("jwt-decode");const a=t.z.object({orgId:t.z.string().min(1),orgName:t.z.string().min(1),llmList:t.z.array(t.z.record(t.z.string())),translateList:t.z.array(t.z.record(t.z.string()))});class r{constructor(t,s,r,e){this.orgId=t,this.orgName=s,this.llmList=r,this.translateList=e,a.parse(this)}static from(t){return new r(t.orgId,t.orgName,t.llmList,t.translateList)}update(t){return r.from({orgId:this.orgId,orgName:t.orgName??this.orgName,llmList:t.llmList??this.llmList,translateList:t.translateList??this.translateList})}}const e=t.z.object({userId:t.z.string().min(1),userName:t.z.string().min(1),organization:a});class n{constructor(t,s,a){this.userId=t,this.userName=s,this.organization=a,e.parse(this)}static from(t){return new n(t.userId,t.userName,t.organization)}update(t){return n.from({userId:this.userId,userName:t.userName??this.userName,organization:t.organization??this.organization})}}const o=t.z.object({userId:t.z.string(),userName:t.z.string(),orgId:t.z.string(),orgName:t.z.string(),llmList:t.z.array(t.z.record(t.z.string())),translateList:t.z.array(t.z.record(t.z.string()))});class i{constructor(t,s,a,r,e,n){this.userId=t,this.userName=s,this.orgId=a,this.orgName=r,this.llmList=e,this.translateList=n,o.parse(this)}static from(t){return new i(t.userId,t.userName,t.orgId,t.orgName,t.llmList,t.translateList)}}class c{static toDomain(t){const s=r.from({orgId:t.orgId,orgName:t.orgName,llmList:t.llmList,translateList:t.translateList});return n.from({userId:t.userId,userName:t.userName,organization:s})}static fromDomain(t){return i.from({userId:t.userId,userName:t.userName,orgId:t.organization.orgId,orgName:t.organization.orgName,llmList:t.organization.llmList,translateList:t.organization.translateList})}}class u{constructor(t){this.organizations=new Map,this.loadData(t)}static getInstance(t){if(!u.instance){if(!t)throw new Error("Organization data is required for local database");u.instance=new u(t)}return u.instance}loadData(t){Object.entries(t).forEach((([t,s])=>{const a=r.from({orgId:t,orgName:s.display_name,llmList:s.llm_apis.map((t=>({...t}))),translateList:s.translate_apis.map((t=>({...t})))});this.organizations.set(t,a)}))}async findById(t){return this.organizations.get(t)||null}async save(t){this.organizations.set(t.orgId,t)}}class l{constructor(t,s){this.organizationRepository=t,this.users=new Map,this.loadData(s)}static getInstance(t,s){if(!l.instance){if(!s)throw new Error("User data is required for local database");l.instance=new l(t,s)}return l.instance}async loadData(t){for(const[s,a]of Object.entries(t)){const t=await this.organizationRepository.findById(a.organization);if(t){const r=n.from({userId:s,userName:a.display_name,organization:t});this.users.set(s,r)}}}async findById(t){return this.users.get(t)||null}async save(t){this.users.set(t.userId,t)}}const d=t.z.enum(["local","production"]),g=t.z.enum(["local","dynamodb"]),m=t.z.record(t.z.object({display_name:t.z.string().min(1),llm_apis:t.z.array(t.z.record(t.z.string())),translate_apis:t.z.array(t.z.record(t.z.string()))})),z=t.z.record(t.z.object({display_name:t.z.string().min(1),organization:t.z.string().min(1)})),h=t.z.object({accountEnv:d.optional(),databaseType:g.optional(),databaseData:t.z.object({organization:m.optional(),user:z.optional()}).optional()});class p{constructor({accountEnv:t="local",databaseType:s="local",databaseData:a}=(()=>h.parse({accountEnv:process.env.AUTHSERVER_ACCOUNT_ENV,databaseType:process.env.AUTHSERVER_DATABASE_TYPE,databaseData:process.env.ORGANIZATION_YAML&&process.env.USER_YAML?{organization:m.parse(JSON.parse(process.env.ORGANIZATION_YAML)),user:z.parse(JSON.parse(process.env.USER_YAML))}:void 0}))()){if(console.log("Container.constructor authEnvParam: ",JSON.stringify(a)),this.accountEnv=t,"local"!==s)throw new Error(`Unsupported database type: ${s}`);if(!a?.organization||!a?.user)throw new Error("Database data is required for local database");this.organizationRepository=u.getInstance(a.organization),this.userRepository=l.getInstance(u.getInstance(),a.user)}static getInstance(t){return p.instance||(p.instance=new p(t)),p.instance}}class I{constructor(t=p.getInstance().accountEnv,s=p.getInstance().userRepository){this.accountEnv=t,this.userRepository=s}async authByCredentials(t,s){return await this.userRepository.findById(t)?t:null}tokenUser(t){const a=s.jwtDecode(t);return a?.sub||null}async getAccountInfo(t,s){const a=s?this.tokenUser(s):t;if(!a)throw new Error("Invalid access token");const r=await this.userRepository.findById(a);if(!r)throw new Error("The user or organization information of the authorized user does not exist in the database");return c.fromDomain(r)}}const y=t.z.object({userId:t.z.string(),password:t.z.string()}),f=t.z.object({userId:t.z.string(),accessToken:t.z.string().optional()});exports.AuthFunctionServer=class{constructor(t=new I){this.usecase=t}get accountEnv(){return this.usecase.accountEnv}async authByCredentials(t){const s=y.parse(t);return await this.usecase.authByCredentials(s.userId,s.password)}async getAccountInfo(t){const s=f.parse(t);return await this.usecase.getAccountInfo(s.userId,s.accessToken)}};
//# sourceMappingURL=bundle.cjs.js.map
