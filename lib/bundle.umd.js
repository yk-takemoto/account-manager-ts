!function(t,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("zod"),require("jwt-decode")):"function"==typeof define&&define.amd?define(["exports","zod","jwt-decode"],s):s((t="undefined"!=typeof globalThis?globalThis:t||self).auth_server={},t.zod,t.jwtDecode)}(this,(function(t,s,a){"use strict";const r=s.z.object({orgId:s.z.string().min(1),orgName:s.z.string().min(1),llmList:s.z.array(s.z.record(s.z.string())),translateList:s.z.array(s.z.record(s.z.string()))});class e{constructor(t,s,a,e){this.orgId=t,this.orgName=s,this.llmList=a,this.translateList=e,r.parse(this)}static from(t){return new e(t.orgId,t.orgName,t.llmList,t.translateList)}update(t){return e.from({orgId:this.orgId,orgName:t.orgName??this.orgName,llmList:t.llmList??this.llmList,translateList:t.translateList??this.translateList})}}const n=s.z.object({userId:s.z.string().min(1),userName:s.z.string().min(1),organization:r});class o{constructor(t,s,a){this.userId=t,this.userName=s,this.organization=a,n.parse(this)}static from(t){return new o(t.userId,t.userName,t.organization)}update(t){return o.from({userId:this.userId,userName:t.userName??this.userName,organization:t.organization??this.organization})}}const i=s.z.object({userId:s.z.string(),userName:s.z.string(),orgId:s.z.string(),orgName:s.z.string(),llmList:s.z.array(s.z.record(s.z.string())),translateList:s.z.array(s.z.record(s.z.string()))});class c{constructor(t,s,a,r,e,n){this.userId=t,this.userName=s,this.orgId=a,this.orgName=r,this.llmList=e,this.translateList=n,i.parse(this)}static from(t){return new c(t.userId,t.userName,t.orgId,t.orgName,t.llmList,t.translateList)}}class u{static toDomain(t){const s=e.from({orgId:t.orgId,orgName:t.orgName,llmList:t.llmList,translateList:t.translateList});return o.from({userId:t.userId,userName:t.userName,organization:s})}static fromDomain(t){return c.from({userId:t.userId,userName:t.userName,orgId:t.organization.orgId,orgName:t.organization.orgName,llmList:t.organization.llmList,translateList:t.organization.translateList})}}class d{constructor(t){this.organizations=new Map,this.loadData(t)}static getInstance(t){if(!d.instance){if(!t)throw new Error("Organization data is required for local database");d.instance=new d(t)}return d.instance}loadData(t){Object.entries(t).forEach((([t,s])=>{const a=e.from({orgId:t,orgName:s.display_name,llmList:s.llm_apis.map((t=>({...t}))),translateList:s.translate_apis.map((t=>({...t})))});this.organizations.set(t,a)}))}async findById(t){return this.organizations.get(t)||null}async save(t){this.organizations.set(t.orgId,t)}}class l{constructor(t,s){this.organizationRepository=t,this.users=new Map,this.loadData(s)}static getInstance(t,s){if(!l.instance){if(!s)throw new Error("User data is required for local database");l.instance=new l(t,s)}return l.instance}async loadData(t){for(const[s,a]of Object.entries(t)){const t=await this.organizationRepository.findById(a.organization);if(t){const r=o.from({userId:s,userName:a.display_name,organization:t});this.users.set(s,r)}}}async findById(t){return this.users.get(t)||null}async save(t){this.users.set(t.userId,t)}}const g=s.z.enum(["local","production"]),m=s.z.enum(["local","dynamodb"]),z=s.z.record(s.z.object({display_name:s.z.string().min(1),llm_apis:s.z.array(s.z.record(s.z.string())),translate_apis:s.z.array(s.z.record(s.z.string()))})),h=s.z.record(s.z.object({display_name:s.z.string().min(1),organization:s.z.string().min(1)})),p=s.z.object({accountEnv:g.optional(),databaseType:m.optional(),databaseData:s.z.object({organization:z.optional(),user:h.optional()}).optional()});class I{constructor({accountEnv:t="local",databaseType:s="local",databaseData:a}=(()=>p.parse({accountEnv:process.env.AUTHSERVER_ACCOUNT_ENV,databaseType:process.env.AUTHSERVER_DATABASE_TYPE,databaseData:process.env.ORGANIZATION_YAML&&process.env.USER_YAML?{organization:z.parse(JSON.parse(process.env.ORGANIZATION_YAML)),user:h.parse(JSON.parse(process.env.USER_YAML))}:void 0}))()){if(console.log("Container.constructor authEnvParam: ",JSON.stringify(a)),this.accountEnv=t,"local"!==s)throw new Error(`Unsupported database type: ${s}`);if(!a?.organization||!a?.user)throw new Error("Database data is required for local database");this.organizationRepository=d.getInstance(a.organization),this.userRepository=l.getInstance(d.getInstance(),a.user)}static getInstance(t){return I.instance||(I.instance=new I(t)),I.instance}}class f{constructor(t=I.getInstance().accountEnv,s=I.getInstance().userRepository){this.accountEnv=t,this.userRepository=s}async authByCredentials(t,s){return await this.userRepository.findById(t)?t:null}tokenUser(t){const s=a.jwtDecode(t);return s?.sub||null}async getAccountInfo(t,s){const a=s?this.tokenUser(s):t;if(!a)throw new Error("Invalid access token");const r=await this.userRepository.findById(a);if(!r)throw new Error("The user or organization information of the authorized user does not exist in the database");return u.fromDomain(r)}}const y=s.z.object({userId:s.z.string(),password:s.z.string()}),N=s.z.object({userId:s.z.string(),accessToken:s.z.string().optional()});t.AuthFunctionServer=class{constructor(t=new f){this.usecase=t}get accountEnv(){return this.usecase.accountEnv}async authByCredentials(t){const s=y.parse(t);return await this.usecase.authByCredentials(s.userId,s.password)}async getAccountInfo(t){const s=N.parse(t);return await this.usecase.getAccountInfo(s.userId,s.accessToken)}}}));
//# sourceMappingURL=bundle.umd.js.map
