{"version":3,"file":"bundle.esm.js","sources":["../src/domain/models/organization.ts","../src/domain/models/user.ts","../src/domain/models/account_info.ts","../src/application/auth.dto.ts","../src/infrastructure/repositories/organization.repository.impl.ts","../src/infrastructure/repositories/user.repository.impl.ts","../src/infrastructure/config/env.config.ts","../src/infrastructure/container.ts","../src/application/auth.usecase.ts","../src/interfaces/auth.controller.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const organizationSchema = z.object({\n  orgId: z.string().min(1),\n  orgName: z.string().min(1),\n  llmList: z.array(z.record(z.string())),\n  translateList: z.array(z.record(z.string())),\n});\n\nexport type Organization = z.infer<typeof organizationSchema>;\n\nexport class OrganizationMapper implements Organization {\n  private constructor(\n    public readonly orgId: string,\n    public readonly orgName: string,\n    public readonly llmList: Record<string, string>[],\n    public readonly translateList: Record<string, string>[],\n  ) {\n    organizationSchema.parse(this);\n  }\n\n  static from(args: Organization): Organization {\n    return new OrganizationMapper(args.orgId, args.orgName, args.llmList, args.translateList);\n  }\n\n  update(args: { orgName?: string; llmList?: Record<string, string>[]; translateList?: Record<string, string>[] }): Organization {\n    return OrganizationMapper.from({\n      orgId: this.orgId,\n      orgName: args.orgName ?? this.orgName,\n      llmList: args.llmList ?? this.llmList,\n      translateList: args.translateList ?? this.translateList,\n    });\n  }\n}\n","import { z } from \"zod\";\nimport { Organization, organizationSchema } from \"@/domain/models/organization\";\n\nconst userSchema = z.object({\n  userId: z.string().min(1),\n  userName: z.string().min(1),\n  organization: organizationSchema,\n});\n\nexport type User = z.infer<typeof userSchema>;\n\nexport class UserMapper implements User {\n  constructor(\n    public readonly userId: string,\n    public readonly userName: string,\n    public readonly organization: Organization,\n  ) {\n    userSchema.parse(this);\n  }\n\n  static from(args: User): User {\n    return new UserMapper(args.userId, args.userName, args.organization);\n  }\n\n  update(args: { userName?: string; organization?: Organization }): User {\n    return UserMapper.from({\n      userId: this.userId,\n      userName: args.userName ?? this.userName,\n      organization: args.organization ?? this.organization,\n    });\n  }\n}\n","import { z } from \"zod\";\n\nexport const AccountInfoSchema = z.object({\n  userId: z.string(),\n  userName: z.string(),\n  orgId: z.string(),\n  orgName: z.string(),\n  llmList: z.array(z.record(z.string())),\n  translateList: z.array(z.record(z.string())),\n});\n\nexport type AccountInfo = z.infer<typeof AccountInfoSchema>;\n\nexport class AccountInfoMapper implements AccountInfo {\n  private constructor(\n    public readonly userId: string,\n    public readonly userName: string,\n    public readonly orgId: string,\n    public readonly orgName: string,\n    public readonly llmList: Record<string, string>[],\n    public readonly translateList: Record<string, string>[],\n  ) {\n    AccountInfoSchema.parse(this);\n  }\n\n  static from(args: AccountInfo): AccountInfo {\n    return new AccountInfoMapper(args.userId, args.userName, args.orgId, args.orgName, args.llmList, args.translateList);\n  }\n}\n","import { User, UserMapper } from \"@/domain/models/user\";\nimport { OrganizationMapper } from \"@/domain/models/organization\";\nimport { AccountInfoMapper, AccountInfo } from \"@/domain/models/account_info\";\n\nexport class AccountInfoDto {\n  static toDomain(accountInfo: AccountInfo): User {\n    const organization = OrganizationMapper.from({\n      orgId: accountInfo.orgId,\n      orgName: accountInfo.orgName,\n      llmList: accountInfo.llmList,\n      translateList: accountInfo.translateList,\n    });\n\n    return UserMapper.from({\n      userId: accountInfo.userId,\n      userName: accountInfo.userName,\n      organization,\n    });\n  }\n\n  static fromDomain(user: User): AccountInfo {\n    return AccountInfoMapper.from({\n      userId: user.userId,\n      userName: user.userName,\n      orgId: user.organization.orgId,\n      orgName: user.organization.orgName,\n      llmList: user.organization.llmList,\n      translateList: user.organization.translateList,\n    });\n  }\n}\n","// import { Injectable } from \"@nestjs/common\";\nimport { Organization, OrganizationMapper } from \"@/domain/models/organization\";\nimport { OrganizationRepository } from \"@/domain/repositories/organization.repository\";\nimport { OrganizationYaml } from \"@/infrastructure/config/env.config\";\n\n// @Injectable()\nexport class OrganizationLocalRepository implements OrganizationRepository {\n  private static instance: OrganizationLocalRepository;\n  private readonly organizations: Map<string, Organization>;\n\n  private constructor(orgData: OrganizationYaml) {\n    this.organizations = new Map();\n    this.loadData(orgData);\n  }\n\n  static getInstance(orgData?: OrganizationYaml): OrganizationRepository {\n    if (!OrganizationLocalRepository.instance) {\n      if (!orgData) {\n        throw new Error(\"Organization data is required for local database\");\n      }\n      OrganizationLocalRepository.instance = new OrganizationLocalRepository(orgData);\n    }\n    return OrganizationLocalRepository.instance;\n  }\n\n  private loadData(organizationYaml: OrganizationYaml) {\n    Object.entries(organizationYaml).forEach(([orgId, org]) => {\n      const organization = OrganizationMapper.from({\n        orgId,\n        orgName: org.display_name,\n        llmList: org.llm_apis.map((api: any) => ({ ...api })),\n        translateList: org.translate_apis.map((api: any) => ({ ...api })),\n      });\n      this.organizations.set(orgId, organization);\n    });\n  }\n\n  async findById(orgId: string): Promise<Organization | null> {\n    return this.organizations.get(orgId) || null;\n  }\n\n  async save(org: Organization): Promise<void> {\n    this.organizations.set(org.orgId, org);\n  }\n}\n","// import { Injectable } from \"@nestjs/common\";\nimport { User, UserMapper } from \"@/domain/models/user\";\nimport { UserRepository } from \"@/domain/repositories/user.repository\";\nimport { OrganizationRepository } from \"@/domain/repositories/organization.repository\";\nimport { UserYaml } from \"@/infrastructure/config/env.config\";\n\n// @Injectable()\nexport class UserLocalRepository implements UserRepository {\n  private static instance: UserLocalRepository;\n  private readonly users: Map<string, User>;\n\n  private constructor(\n    private readonly organizationRepository: OrganizationRepository,\n    userData: UserYaml,\n    // private readonly accountEnv: AccountEnv = \"local\",\n  ) {\n    this.users = new Map();\n    this.loadData(userData);\n  }\n\n  static getInstance(organizationRepository: OrganizationRepository, userData?: UserYaml): UserRepository {\n    if (!UserLocalRepository.instance) {\n      if (!userData) {\n        throw new Error(\"User data is required for local database\");\n      }\n      UserLocalRepository.instance = new UserLocalRepository(organizationRepository, userData);\n    }\n    return UserLocalRepository.instance;\n  }\n\n  private async loadData(userYaml: UserYaml) {\n    for (const [userId, user] of Object.entries(userYaml)) {\n      const organization = await this.organizationRepository.findById(user.organization);\n      if (organization) {\n        const userEntity = UserMapper.from({\n          userId,\n          userName: user.display_name,\n          organization,\n        });\n        this.users.set(userId, userEntity);\n      }\n    }\n  }\n\n  async findById(userId: string): Promise<User | null> {\n    return this.users.get(userId) || null;\n  }\n\n  async save(user: User): Promise<void> {\n    this.users.set(user.userId, user);\n  }\n}\n","import { z } from \"zod\";\n\nexport const accountEnvSchema = z.enum([\"local\", \"production\"]);\nexport type AccountEnv = z.infer<typeof accountEnvSchema>;\n\nexport const databaseTypeSchema = z.enum([\"local\", \"dynamodb\"]);\nexport type DatabaseType = z.infer<typeof databaseTypeSchema>;\n\nexport const organizationYamlSchema = z.record(\n  z.object({\n    display_name: z.string().min(1),\n    llm_apis: z.array(z.record(z.string())),\n    translate_apis: z.array(z.record(z.string())),\n  }),\n);\n\nexport type OrganizationYaml = z.infer<typeof organizationYamlSchema>;\n\nexport const userYamlSchema = z.record(\n  z.object({\n    display_name: z.string().min(1),\n    organization: z.string().min(1),\n  }),\n);\n\nexport type UserYaml = z.infer<typeof userYamlSchema>;\n\nexport const authEnvParamSchema = z.object({\n  accountEnv: accountEnvSchema.optional(),\n  databaseType: databaseTypeSchema.optional(),\n  databaseData: z\n    .object({\n      organization: organizationYamlSchema.optional(),\n      user: userYamlSchema.optional(),\n    })\n    .optional(),\n});\n\nexport type AuthEnvParam = z.infer<typeof authEnvParamSchema>;\n\nexport const createAuthEnvParam = () =>\n  authEnvParamSchema.parse({\n    accountEnv: process.env.AUTHSERVER_ACCOUNT_ENV,\n    databaseType: process.env.AUTHSERVER_DATABASE_TYPE,\n    databaseData:\n      process.env.ORGANIZATION_YAML && process.env.USER_YAML\n        ? {\n            organization: organizationYamlSchema.parse(JSON.parse(process.env.ORGANIZATION_YAML)),\n            user: userYamlSchema.parse(JSON.parse(process.env.USER_YAML)),\n          }\n        : undefined,\n  });\n","import { OrganizationRepository } from \"@/domain/repositories/organization.repository\";\nimport { UserRepository } from \"@/domain/repositories/user.repository\";\nimport { OrganizationLocalRepository } from \"@/infrastructure/repositories/organization.repository.impl\";\nimport { UserLocalRepository } from \"@/infrastructure/repositories/user.repository.impl\";\nimport { AccountEnv, AuthEnvParam, createAuthEnvParam } from \"@/infrastructure/config/env.config\";\n\nexport class Container {\n  private static instance: Container;\n  public readonly accountEnv: AccountEnv;\n  public readonly organizationRepository: OrganizationRepository;\n  public readonly userRepository: UserRepository;\n\n  private constructor({ accountEnv = \"local\", databaseType = \"local\", databaseData }: AuthEnvParam = createAuthEnvParam()) {\n    // debug\n    console.log(\"Container.constructor authEnvParam: \", JSON.stringify(databaseData));\n    this.accountEnv = accountEnv;\n    switch (databaseType) {\n      case \"local\":\n        if (!databaseData?.organization || !databaseData?.user) {\n          throw new Error(\"Database data is required for local database\");\n        }\n        this.organizationRepository = OrganizationLocalRepository.getInstance(databaseData.organization);\n        this.userRepository = UserLocalRepository.getInstance(OrganizationLocalRepository.getInstance(), databaseData.user);\n        break;\n      default:\n        throw new Error(`Unsupported database type: ${databaseType}`);\n    }\n  }\n\n  static getInstance(param?: AuthEnvParam): Container {\n    if (!Container.instance) {\n      Container.instance = new Container(param);\n    }\n    return Container.instance;\n  }\n}\n","import { jwtDecode } from \"jwt-decode\";\nimport { AccountInfo } from \"@/domain/models/account_info\";\nimport { AccountInfoDto } from \"@/application/auth.dto\";\nimport { Container } from \"@/infrastructure/container\";\n\nexport class AuthUsecase {\n  constructor(\n    public readonly accountEnv = Container.getInstance().accountEnv,\n    private readonly userRepository = Container.getInstance().userRepository,\n  ) {}\n\n  async authByCredentials(userId: string, __: string): Promise<string | null> {\n    const user = await this.userRepository.findById(userId);\n    // Currently, there is no password verification\n    if (!user) {\n      return null;\n    }\n    return userId;\n  }\n\n  private tokenUser(accessToken: string): string | null {\n    const decoded = jwtDecode(accessToken);\n    return decoded?.sub || null;\n  }\n\n  async getAccountInfo(userId: string, accessToken?: string): Promise<AccountInfo> {\n    const authedUserId = accessToken ? this.tokenUser(accessToken) : userId;\n    if (!authedUserId) {\n      throw new Error(\"Invalid access token\");\n    }\n    const user = await this.userRepository.findById(authedUserId);\n    if (!user) {\n      throw new Error(\"The user or organization information of the authorized user does not exist in the database\");\n    }\n    return AccountInfoDto.fromDomain(user);\n  }\n}\n","import { z } from \"zod\";\nimport { AuthUsecase } from \"@/application/auth.usecase\";\n\nconst AuthByCredentialsInputSchema = z.object({\n  userId: z.string(),\n  password: z.string(),\n});\n\nconst GetAccountInfoInputSchema = z.object({\n  userId: z.string(),\n  accessToken: z.string().optional(),\n});\n\nexport type AuthByCredentialsInput = z.infer<typeof AuthByCredentialsInputSchema>;\nexport type GetAccountInfoInput = z.infer<typeof GetAccountInfoInputSchema>;\n\nexport class AuthFunctionServer {\n  constructor(private readonly usecase: AuthUsecase = new AuthUsecase()) {}\n\n  get accountEnv() {\n    return this.usecase.accountEnv;\n  }\n\n  async authByCredentials(input: AuthByCredentialsInput): Promise<string | null> {\n    const validated = AuthByCredentialsInputSchema.parse(input);\n    return await this.usecase.authByCredentials(validated.userId, validated.password);\n  }\n\n  async getAccountInfo(input: GetAccountInfoInput) {\n    const validated = GetAccountInfoInputSchema.parse(input);\n    return await this.usecase.getAccountInfo(validated.userId, validated.accessToken);\n  }\n}\n"],"names":[],"mappings":"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"}